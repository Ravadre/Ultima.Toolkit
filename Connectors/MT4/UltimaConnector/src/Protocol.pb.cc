// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Ultima {
namespace MT4 {
namespace Packets {

void protobuf_ShutdownFile_Protocol_2eproto() {
  delete LoginDTO::default_instance_;
  delete SymbolRegistrationDTO::default_instance_;
  delete PriceDTO::default_instance_;
  delete OpenOrderCommandDTO::default_instance_;
  delete ModifyOrderCommandDTO::default_instance_;
  delete CloseOrderCommandDTO::default_instance_;
  delete CloseOrderByCommandDTO::default_instance_;
  delete OrderInfoDTO::default_instance_;
  delete UpdateOrdersDTO::default_instance_;
  delete CommandResultDTO::default_instance_;
  delete RequestHistoryDTO::default_instance_;
  delete HistoryOrderInfoDTO::default_instance_;
  delete OrdersHistoryDTO::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Protocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LoginDTO::default_instance_ = new LoginDTO();
  SymbolRegistrationDTO::default_instance_ = new SymbolRegistrationDTO();
  PriceDTO::default_instance_ = new PriceDTO();
  OpenOrderCommandDTO::default_instance_ = new OpenOrderCommandDTO();
  ModifyOrderCommandDTO::default_instance_ = new ModifyOrderCommandDTO();
  CloseOrderCommandDTO::default_instance_ = new CloseOrderCommandDTO();
  CloseOrderByCommandDTO::default_instance_ = new CloseOrderByCommandDTO();
  OrderInfoDTO::default_instance_ = new OrderInfoDTO();
  UpdateOrdersDTO::default_instance_ = new UpdateOrdersDTO();
  CommandResultDTO::default_instance_ = new CommandResultDTO();
  RequestHistoryDTO::default_instance_ = new RequestHistoryDTO();
  HistoryOrderInfoDTO::default_instance_ = new HistoryOrderInfoDTO();
  OrdersHistoryDTO::default_instance_ = new OrdersHistoryDTO();
  LoginDTO::default_instance_->InitAsDefaultInstance();
  SymbolRegistrationDTO::default_instance_->InitAsDefaultInstance();
  PriceDTO::default_instance_->InitAsDefaultInstance();
  OpenOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  ModifyOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  CloseOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  CloseOrderByCommandDTO::default_instance_->InitAsDefaultInstance();
  OrderInfoDTO::default_instance_->InitAsDefaultInstance();
  UpdateOrdersDTO::default_instance_->InitAsDefaultInstance();
  CommandResultDTO::default_instance_->InitAsDefaultInstance();
  RequestHistoryDTO::default_instance_->InitAsDefaultInstance();
  HistoryOrderInfoDTO::default_instance_->InitAsDefaultInstance();
  OrdersHistoryDTO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Protocol_2eproto_once_);
void protobuf_AddDesc_Protocol_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Protocol_2eproto_once_,
                 &protobuf_AddDesc_Protocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2eproto {
  StaticDescriptorInitializer_Protocol_2eproto() {
    protobuf_AddDesc_Protocol_2eproto();
  }
} static_descriptor_initializer_Protocol_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LoginDTO::kCompanyFieldNumber;
#endif  // !_MSC_VER

LoginDTO::LoginDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginDTO::InitAsDefaultInstance() {
}

LoginDTO::LoginDTO(const LoginDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginDTO::SharedCtor() {
  _cached_size_ = 0;
  company_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDTO::~LoginDTO() {
  SharedDtor();
}

void LoginDTO::SharedDtor() {
  if (company_ != &::google::protobuf::internal::kEmptyString) {
    delete company_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginDTO& LoginDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

LoginDTO* LoginDTO::default_instance_ = NULL;

LoginDTO* LoginDTO::New() const {
  return new LoginDTO;
}

void LoginDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_company()) {
      if (company_ != &::google::protobuf::internal::kEmptyString) {
        company_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string company = 1;
  if (has_company()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->company(), output);
  }

}

int LoginDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company = 1;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginDTO*>(&from));
}

void LoginDTO::MergeFrom(const LoginDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company()) {
      set_company(from.company());
    }
  }
}

void LoginDTO::CopyFrom(const LoginDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginDTO::Swap(LoginDTO* other) {
  if (other != this) {
    std::swap(company_, other->company_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.LoginDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolRegistrationDTO::kSymbolFieldNumber;
const int SymbolRegistrationDTO::kRegisterFieldNumber;
#endif  // !_MSC_VER

SymbolRegistrationDTO::SymbolRegistrationDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SymbolRegistrationDTO::InitAsDefaultInstance() {
}

SymbolRegistrationDTO::SymbolRegistrationDTO(const SymbolRegistrationDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolRegistrationDTO::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  register__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolRegistrationDTO::~SymbolRegistrationDTO() {
  SharedDtor();
}

void SymbolRegistrationDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SymbolRegistrationDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SymbolRegistrationDTO& SymbolRegistrationDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

SymbolRegistrationDTO* SymbolRegistrationDTO::default_instance_ = NULL;

SymbolRegistrationDTO* SymbolRegistrationDTO::New() const {
  return new SymbolRegistrationDTO;
}

void SymbolRegistrationDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    register__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SymbolRegistrationDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_register;
        break;
      }

      // required bool register = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &register__)));
          set_has_register_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolRegistrationDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required bool register = 2;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->register_(), output);
  }

}

int SymbolRegistrationDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required bool register = 2;
    if (has_register_()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRegistrationDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SymbolRegistrationDTO*>(&from));
}

void SymbolRegistrationDTO::MergeFrom(const SymbolRegistrationDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_register_()) {
      set_register_(from.register_());
    }
  }
}

void SymbolRegistrationDTO::CopyFrom(const SymbolRegistrationDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRegistrationDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SymbolRegistrationDTO::Swap(SymbolRegistrationDTO* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(register__, other->register__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SymbolRegistrationDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.SymbolRegistrationDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int PriceDTO::kSymbolFieldNumber;
const int PriceDTO::kBidFieldNumber;
const int PriceDTO::kAskFieldNumber;
#endif  // !_MSC_VER

PriceDTO::PriceDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PriceDTO::InitAsDefaultInstance() {
}

PriceDTO::PriceDTO(const PriceDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PriceDTO::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_ = 0;
  ask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceDTO::~PriceDTO() {
  SharedDtor();
}

void PriceDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PriceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PriceDTO& PriceDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

PriceDTO* PriceDTO::default_instance_ = NULL;

PriceDTO* PriceDTO::New() const {
  return new PriceDTO;
}

void PriceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    bid_ = 0;
    ask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PriceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bid;
        break;
      }

      // required double bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ask;
        break;
      }

      // required double ask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required double bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid(), output);
  }

  // required double ask = 3;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ask(), output);
  }

}

int PriceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required double bid = 2;
    if (has_bid()) {
      total_size += 1 + 8;
    }

    // required double ask = 3;
    if (has_ask()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PriceDTO*>(&from));
}

void PriceDTO::MergeFrom(const PriceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
  }
}

void PriceDTO::CopyFrom(const PriceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PriceDTO::Swap(PriceDTO* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(bid_, other->bid_);
    std::swap(ask_, other->ask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PriceDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.PriceDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int OpenOrderCommandDTO::kCommandFieldNumber;
const int OpenOrderCommandDTO::kSymbolFieldNumber;
const int OpenOrderCommandDTO::kTradeCommandFieldNumber;
const int OpenOrderCommandDTO::kVolumeFieldNumber;
const int OpenOrderCommandDTO::kOpenPriceFieldNumber;
const int OpenOrderCommandDTO::kStopLossFieldNumber;
const int OpenOrderCommandDTO::kTakeProfitFieldNumber;
const int OpenOrderCommandDTO::kSlippageFieldNumber;
const int OpenOrderCommandDTO::kCommentFieldNumber;
const int OpenOrderCommandDTO::kMagicNumberFieldNumber;
const int OpenOrderCommandDTO::kRetriesFieldNumber;
const int OpenOrderCommandDTO::kRetrySpanMsFieldNumber;
const int OpenOrderCommandDTO::kLastChanceRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

OpenOrderCommandDTO::OpenOrderCommandDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OpenOrderCommandDTO::InitAsDefaultInstance() {
}

OpenOrderCommandDTO::OpenOrderCommandDTO(const OpenOrderCommandDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OpenOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  slippage_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magicnumber_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  lastchanceretryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOrderCommandDTO::~OpenOrderCommandDTO() {
  SharedDtor();
}

void OpenOrderCommandDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OpenOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenOrderCommandDTO& OpenOrderCommandDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

OpenOrderCommandDTO* OpenOrderCommandDTO::default_instance_ = NULL;

OpenOrderCommandDTO* OpenOrderCommandDTO::New() const {
  return new OpenOrderCommandDTO;
}

void OpenOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    slippage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    magicnumber_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
    lastchanceretryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OpenOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slippage;
        break;
      }

      // required int32 slippage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slippage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slippage_)));
          set_has_slippage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // optional string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magicNumber;
        break;
      }

      // optional int32 magicNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicnumber_)));
          set_has_magicnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_retries;
        break;
      }

      // required int32 retries = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lastChanceRetrySpanMs;
        break;
      }

      // required int32 lastChanceRetrySpanMs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastChanceRetrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastchanceretryspanms_)));
          set_has_lastchanceretryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required int32 slippage = 8;
  if (has_slippage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->slippage(), output);
  }

  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  // optional int32 magicNumber = 10;
  if (has_magicnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->magicnumber(), output);
  }

  // required int32 retries = 11;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retries(), output);
  }

  // required int32 retrySpanMs = 12;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retryspanms(), output);
  }

  // required int32 lastChanceRetrySpanMs = 13;
  if (has_lastchanceretryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lastchanceretryspanms(), output);
  }

}

int OpenOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required int32 slippage = 8;
    if (has_slippage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slippage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional int32 magicNumber = 10;
    if (has_magicnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicnumber());
    }

    // required int32 retries = 11;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 12;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

    // required int32 lastChanceRetrySpanMs = 13;
    if (has_lastchanceretryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastchanceretryspanms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOrderCommandDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenOrderCommandDTO*>(&from));
}

void OpenOrderCommandDTO::MergeFrom(const OpenOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_slippage()) {
      set_slippage(from.slippage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_magicnumber()) {
      set_magicnumber(from.magicnumber());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
    if (from.has_lastchanceretryspanms()) {
      set_lastchanceretryspanms(from.lastchanceretryspanms());
    }
  }
}

void OpenOrderCommandDTO::CopyFrom(const OpenOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001cff) != 0x00001cff) return false;

  return true;
}

void OpenOrderCommandDTO::Swap(OpenOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(slippage_, other->slippage_);
    std::swap(comment_, other->comment_);
    std::swap(magicnumber_, other->magicnumber_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(lastchanceretryspanms_, other->lastchanceretryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OpenOrderCommandDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.OpenOrderCommandDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyOrderCommandDTO::kCommandFieldNumber;
const int ModifyOrderCommandDTO::kOrderFieldNumber;
const int ModifyOrderCommandDTO::kOpenPriceFieldNumber;
const int ModifyOrderCommandDTO::kStopLossFieldNumber;
const int ModifyOrderCommandDTO::kTakeProfitFieldNumber;
const int ModifyOrderCommandDTO::kRetriesFieldNumber;
const int ModifyOrderCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

ModifyOrderCommandDTO::ModifyOrderCommandDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModifyOrderCommandDTO::InitAsDefaultInstance() {
}

ModifyOrderCommandDTO::ModifyOrderCommandDTO(const ModifyOrderCommandDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyOrderCommandDTO::~ModifyOrderCommandDTO() {
  SharedDtor();
}

void ModifyOrderCommandDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModifyOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModifyOrderCommandDTO& ModifyOrderCommandDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

ModifyOrderCommandDTO* ModifyOrderCommandDTO::default_instance_ = NULL;

ModifyOrderCommandDTO* ModifyOrderCommandDTO::New() const {
  return new ModifyOrderCommandDTO;
}

void ModifyOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModifyOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_retries;
        break;
      }

      // required int32 retries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required double openPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // required double stopLoss = 4;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stoploss(), output);
  }

  // required double takeProfit = 5;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->takeprofit(), output);
  }

  // required int32 retries = 6;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retries(), output);
  }

  // required int32 retrySpanMs = 7;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->retryspanms(), output);
  }

}

int ModifyOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required double openPrice = 3;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 4;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 5;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required int32 retries = 6;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 7;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyOrderCommandDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModifyOrderCommandDTO*>(&from));
}

void ModifyOrderCommandDTO::MergeFrom(const ModifyOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
}

void ModifyOrderCommandDTO::CopyFrom(const ModifyOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ModifyOrderCommandDTO::Swap(ModifyOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModifyOrderCommandDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.ModifyOrderCommandDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int CloseOrderCommandDTO::kCommandFieldNumber;
const int CloseOrderCommandDTO::kOrderFieldNumber;
const int CloseOrderCommandDTO::kRetriesFieldNumber;
const int CloseOrderCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

CloseOrderCommandDTO::CloseOrderCommandDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CloseOrderCommandDTO::InitAsDefaultInstance() {
}

CloseOrderCommandDTO::CloseOrderCommandDTO(const CloseOrderCommandDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CloseOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseOrderCommandDTO::~CloseOrderCommandDTO() {
  SharedDtor();
}

void CloseOrderCommandDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CloseOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CloseOrderCommandDTO& CloseOrderCommandDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

CloseOrderCommandDTO* CloseOrderCommandDTO::default_instance_ = NULL;

CloseOrderCommandDTO* CloseOrderCommandDTO::New() const {
  return new CloseOrderCommandDTO;
}

void CloseOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CloseOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retries;
        break;
      }

      // required int32 retries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required int32 retries = 3;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retries(), output);
  }

  // required int32 retrySpanMs = 4;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retryspanms(), output);
  }

}

int CloseOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required int32 retries = 3;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 4;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseOrderCommandDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CloseOrderCommandDTO*>(&from));
}

void CloseOrderCommandDTO::MergeFrom(const CloseOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
}

void CloseOrderCommandDTO::CopyFrom(const CloseOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CloseOrderCommandDTO::Swap(CloseOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CloseOrderCommandDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.CloseOrderCommandDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int CloseOrderByCommandDTO::kCommandFieldNumber;
const int CloseOrderByCommandDTO::kOrderFieldNumber;
const int CloseOrderByCommandDTO::kOrderByFieldNumber;
const int CloseOrderByCommandDTO::kRetriesFieldNumber;
const int CloseOrderByCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

CloseOrderByCommandDTO::CloseOrderByCommandDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CloseOrderByCommandDTO::InitAsDefaultInstance() {
}

CloseOrderByCommandDTO::CloseOrderByCommandDTO(const CloseOrderByCommandDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CloseOrderByCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  orderby_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseOrderByCommandDTO::~CloseOrderByCommandDTO() {
  SharedDtor();
}

void CloseOrderByCommandDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CloseOrderByCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CloseOrderByCommandDTO& CloseOrderByCommandDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

CloseOrderByCommandDTO* CloseOrderByCommandDTO::default_instance_ = NULL;

CloseOrderByCommandDTO* CloseOrderByCommandDTO::New() const {
  return new CloseOrderByCommandDTO;
}

void CloseOrderByCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    orderby_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CloseOrderByCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_orderBy;
        break;
      }

      // required int32 orderBy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderBy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderby_)));
          set_has_orderby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_retries;
        break;
      }

      // required int32 retries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseOrderByCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required int32 orderBy = 3;
  if (has_orderby()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderby(), output);
  }

  // required int32 retries = 4;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retries(), output);
  }

  // required int32 retrySpanMs = 5;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retryspanms(), output);
  }

}

int CloseOrderByCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required int32 orderBy = 3;
    if (has_orderby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderby());
    }

    // required int32 retries = 4;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 5;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseOrderByCommandDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CloseOrderByCommandDTO*>(&from));
}

void CloseOrderByCommandDTO::MergeFrom(const CloseOrderByCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_orderby()) {
      set_orderby(from.orderby());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
}

void CloseOrderByCommandDTO::CopyFrom(const CloseOrderByCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseOrderByCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CloseOrderByCommandDTO::Swap(CloseOrderByCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(orderby_, other->orderby_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CloseOrderByCommandDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.CloseOrderByCommandDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfoDTO::kOrderFieldNumber;
const int OrderInfoDTO::kSymbolFieldNumber;
const int OrderInfoDTO::kTradeCommandFieldNumber;
const int OrderInfoDTO::kVolumeFieldNumber;
const int OrderInfoDTO::kOpenPriceFieldNumber;
const int OrderInfoDTO::kStopLossFieldNumber;
const int OrderInfoDTO::kTakeProfitFieldNumber;
const int OrderInfoDTO::kClosePriceFieldNumber;
const int OrderInfoDTO::kProfitFieldNumber;
const int OrderInfoDTO::kPointProfitFieldNumber;
const int OrderInfoDTO::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

OrderInfoDTO::OrderInfoDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OrderInfoDTO::InitAsDefaultInstance() {
}

OrderInfoDTO::OrderInfoDTO(const OrderInfoDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OrderInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  closeprice_ = 0;
  profit_ = 0;
  pointprofit_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfoDTO::~OrderInfoDTO() {
  SharedDtor();
}

void OrderInfoDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrderInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrderInfoDTO& OrderInfoDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

OrderInfoDTO* OrderInfoDTO::default_instance_ = NULL;

OrderInfoDTO* OrderInfoDTO::New() const {
  return new OrderInfoDTO;
}

void OrderInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    closeprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profit_ = 0;
    pointprofit_ = 0;
    opentime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OrderInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_closePrice;
        break;
      }

      // required double closePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_profit;
        break;
      }

      // required double profit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pointProfit;
        break;
      }

      // required int32 pointProfit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointprofit_)));
          set_has_pointprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->closeprice(), output);
  }

  // required double profit = 9;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->profit(), output);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pointprofit(), output);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opentime(), output);
  }

}

int OrderInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required double closePrice = 8;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double profit = 9;
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // required int32 pointProfit = 10;
    if (has_pointprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointprofit());
    }

    // required int32 openTime = 11;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfoDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrderInfoDTO*>(&from));
}

void OrderInfoDTO::MergeFrom(const OrderInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_pointprofit()) {
      set_pointprofit(from.pointprofit());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
}

void OrderInfoDTO::CopyFrom(const OrderInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void OrderInfoDTO::Swap(OrderInfoDTO* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(profit_, other->profit_);
    std::swap(pointprofit_, other->pointprofit_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrderInfoDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.OrderInfoDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateOrdersDTO::kOrdersFieldNumber;
#endif  // !_MSC_VER

UpdateOrdersDTO::UpdateOrdersDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateOrdersDTO::InitAsDefaultInstance() {
}

UpdateOrdersDTO::UpdateOrdersDTO(const UpdateOrdersDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateOrdersDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateOrdersDTO::~UpdateOrdersDTO() {
  SharedDtor();
}

void UpdateOrdersDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateOrdersDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateOrdersDTO& UpdateOrdersDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

UpdateOrdersDTO* UpdateOrdersDTO::default_instance_ = NULL;

UpdateOrdersDTO* UpdateOrdersDTO::New() const {
  return new UpdateOrdersDTO;
}

void UpdateOrdersDTO::Clear() {
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateOrdersDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Ultima.MT4.Packets.OrderInfoDTO orders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateOrdersDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Ultima.MT4.Packets.OrderInfoDTO orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->orders(i), output);
  }

}

int UpdateOrdersDTO::ByteSize() const {
  int total_size = 0;

  // repeated .Ultima.MT4.Packets.OrderInfoDTO orders = 1;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateOrdersDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateOrdersDTO*>(&from));
}

void UpdateOrdersDTO::MergeFrom(const UpdateOrdersDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
}

void UpdateOrdersDTO::CopyFrom(const UpdateOrdersDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrdersDTO::IsInitialized() const {

  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateOrdersDTO::Swap(UpdateOrdersDTO* other) {
  if (other != this) {
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateOrdersDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.UpdateOrdersDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int CommandResultDTO::kCommandFieldNumber;
const int CommandResultDTO::kResultFieldNumber;
const int CommandResultDTO::kOrderFieldNumber;
#endif  // !_MSC_VER

CommandResultDTO::CommandResultDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandResultDTO::InitAsDefaultInstance() {
}

CommandResultDTO::CommandResultDTO(const CommandResultDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResultDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  result_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResultDTO::~CommandResultDTO() {
  SharedDtor();
}

void CommandResultDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommandResultDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandResultDTO& CommandResultDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

CommandResultDTO* CommandResultDTO::default_instance_ = NULL;

CommandResultDTO* CommandResultDTO::New() const {
  return new CommandResultDTO;
}

void CommandResultDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    result_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandResultDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // required int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResultDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

}

int CommandResultDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResultDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandResultDTO*>(&from));
}

void CommandResultDTO::MergeFrom(const CommandResultDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
}

void CommandResultDTO::CopyFrom(const CommandResultDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResultDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CommandResultDTO::Swap(CommandResultDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(result_, other->result_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandResultDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.CommandResultDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHistoryDTO::kCommandFieldNumber;
#endif  // !_MSC_VER

RequestHistoryDTO::RequestHistoryDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestHistoryDTO::InitAsDefaultInstance() {
}

RequestHistoryDTO::RequestHistoryDTO(const RequestHistoryDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHistoryDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHistoryDTO::~RequestHistoryDTO() {
  SharedDtor();
}

void RequestHistoryDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestHistoryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestHistoryDTO& RequestHistoryDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

RequestHistoryDTO* RequestHistoryDTO::default_instance_ = NULL;

RequestHistoryDTO* RequestHistoryDTO::New() const {
  return new RequestHistoryDTO;
}

void RequestHistoryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestHistoryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestHistoryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

}

int RequestHistoryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHistoryDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestHistoryDTO*>(&from));
}

void RequestHistoryDTO::MergeFrom(const RequestHistoryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
}

void RequestHistoryDTO::CopyFrom(const RequestHistoryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHistoryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestHistoryDTO::Swap(RequestHistoryDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestHistoryDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.RequestHistoryDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryOrderInfoDTO::kOrderFieldNumber;
const int HistoryOrderInfoDTO::kSymbolFieldNumber;
const int HistoryOrderInfoDTO::kTradeCommandFieldNumber;
const int HistoryOrderInfoDTO::kVolumeFieldNumber;
const int HistoryOrderInfoDTO::kOpenPriceFieldNumber;
const int HistoryOrderInfoDTO::kStopLossFieldNumber;
const int HistoryOrderInfoDTO::kTakeProfitFieldNumber;
const int HistoryOrderInfoDTO::kClosePriceFieldNumber;
const int HistoryOrderInfoDTO::kProfitFieldNumber;
const int HistoryOrderInfoDTO::kPointProfitFieldNumber;
const int HistoryOrderInfoDTO::kOpenTimeFieldNumber;
const int HistoryOrderInfoDTO::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

HistoryOrderInfoDTO::HistoryOrderInfoDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HistoryOrderInfoDTO::InitAsDefaultInstance() {
}

HistoryOrderInfoDTO::HistoryOrderInfoDTO(const HistoryOrderInfoDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryOrderInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  closeprice_ = 0;
  profit_ = 0;
  pointprofit_ = 0;
  opentime_ = 0;
  closetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryOrderInfoDTO::~HistoryOrderInfoDTO() {
  SharedDtor();
}

void HistoryOrderInfoDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HistoryOrderInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistoryOrderInfoDTO& HistoryOrderInfoDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

HistoryOrderInfoDTO* HistoryOrderInfoDTO::default_instance_ = NULL;

HistoryOrderInfoDTO* HistoryOrderInfoDTO::New() const {
  return new HistoryOrderInfoDTO;
}

void HistoryOrderInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    closeprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profit_ = 0;
    pointprofit_ = 0;
    opentime_ = 0;
    closetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HistoryOrderInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_closePrice;
        break;
      }

      // required double closePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_profit;
        break;
      }

      // required double profit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pointProfit;
        break;
      }

      // required int32 pointProfit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointprofit_)));
          set_has_pointprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_closeTime;
        break;
      }

      // required int32 closeTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryOrderInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->closeprice(), output);
  }

  // required double profit = 9;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->profit(), output);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pointprofit(), output);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opentime(), output);
  }

  // required int32 closeTime = 12;
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->closetime(), output);
  }

}

int HistoryOrderInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required double closePrice = 8;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double profit = 9;
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // required int32 pointProfit = 10;
    if (has_pointprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointprofit());
    }

    // required int32 openTime = 11;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

    // required int32 closeTime = 12;
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryOrderInfoDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistoryOrderInfoDTO*>(&from));
}

void HistoryOrderInfoDTO::MergeFrom(const HistoryOrderInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_pointprofit()) {
      set_pointprofit(from.pointprofit());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
  }
}

void HistoryOrderInfoDTO::CopyFrom(const HistoryOrderInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryOrderInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void HistoryOrderInfoDTO::Swap(HistoryOrderInfoDTO* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(profit_, other->profit_);
    std::swap(pointprofit_, other->pointprofit_);
    std::swap(opentime_, other->opentime_);
    std::swap(closetime_, other->closetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HistoryOrderInfoDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.HistoryOrderInfoDTO";
}


// ===================================================================

#ifndef _MSC_VER
const int OrdersHistoryDTO::kCommandFieldNumber;
const int OrdersHistoryDTO::kOrdersFieldNumber;
#endif  // !_MSC_VER

OrdersHistoryDTO::OrdersHistoryDTO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OrdersHistoryDTO::InitAsDefaultInstance() {
}

OrdersHistoryDTO::OrdersHistoryDTO(const OrdersHistoryDTO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OrdersHistoryDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdersHistoryDTO::~OrdersHistoryDTO() {
  SharedDtor();
}

void OrdersHistoryDTO::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrdersHistoryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrdersHistoryDTO& OrdersHistoryDTO::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
#endif
  return *default_instance_;
}

OrdersHistoryDTO* OrdersHistoryDTO::default_instance_ = NULL;

OrdersHistoryDTO* OrdersHistoryDTO::New() const {
  return new OrdersHistoryDTO;
}

void OrdersHistoryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
  }
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OrdersHistoryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orders;
        break;
      }

      // repeated .Ultima.MT4.Packets.HistoryOrderInfoDTO orders = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrdersHistoryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // repeated .Ultima.MT4.Packets.HistoryOrderInfoDTO orders = 2;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->orders(i), output);
  }

}

int OrdersHistoryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  // repeated .Ultima.MT4.Packets.HistoryOrderInfoDTO orders = 2;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdersHistoryDTO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrdersHistoryDTO*>(&from));
}

void OrdersHistoryDTO::MergeFrom(const OrdersHistoryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
}

void OrdersHistoryDTO::CopyFrom(const OrdersHistoryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersHistoryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  return true;
}

void OrdersHistoryDTO::Swap(OrdersHistoryDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrdersHistoryDTO::GetTypeName() const {
  return "Ultima.MT4.Packets.OrdersHistoryDTO";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packets
}  // namespace MT4
}  // namespace Ultima

// @@protoc_insertion_point(global_scope)

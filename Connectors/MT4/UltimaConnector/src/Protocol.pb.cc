// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolRegistrationDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolRegistrationDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenOrderCommandDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenOrderCommandDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyOrderCommandDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyOrderCommandDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseOrderCommandDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseOrderCommandDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseOrderByCommandDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseOrderByCommandDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateOrdersDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateOrdersDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandResultDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandResultDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHistoryDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHistoryDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryOrderInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryOrderInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdersHistoryDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdersHistoryDTO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2eproto() {
  protobuf_AddDesc_Protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol.proto");
  GOOGLE_CHECK(file != NULL);
  LoginDTO_descriptor_ = file->message_type(0);
  static const int LoginDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDTO, company_),
  };
  LoginDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDTO_descriptor_,
      LoginDTO::default_instance_,
      LoginDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDTO));
  SymbolRegistrationDTO_descriptor_ = file->message_type(1);
  static const int SymbolRegistrationDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRegistrationDTO, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRegistrationDTO, register__),
  };
  SymbolRegistrationDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolRegistrationDTO_descriptor_,
      SymbolRegistrationDTO::default_instance_,
      SymbolRegistrationDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRegistrationDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRegistrationDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolRegistrationDTO));
  PriceDTO_descriptor_ = file->message_type(2);
  static const int PriceDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceDTO, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceDTO, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceDTO, ask_),
  };
  PriceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceDTO_descriptor_,
      PriceDTO::default_instance_,
      PriceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceDTO));
  OpenOrderCommandDTO_descriptor_ = file->message_type(3);
  static const int OpenOrderCommandDTO_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, tradecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, stoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, takeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, slippage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, magicnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, retryspanms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, lastchanceretryspanms_),
  };
  OpenOrderCommandDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenOrderCommandDTO_descriptor_,
      OpenOrderCommandDTO::default_instance_,
      OpenOrderCommandDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrderCommandDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenOrderCommandDTO));
  ModifyOrderCommandDTO_descriptor_ = file->message_type(4);
  static const int ModifyOrderCommandDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, stoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, takeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, retryspanms_),
  };
  ModifyOrderCommandDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyOrderCommandDTO_descriptor_,
      ModifyOrderCommandDTO::default_instance_,
      ModifyOrderCommandDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrderCommandDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyOrderCommandDTO));
  CloseOrderCommandDTO_descriptor_ = file->message_type(5);
  static const int CloseOrderCommandDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, retryspanms_),
  };
  CloseOrderCommandDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseOrderCommandDTO_descriptor_,
      CloseOrderCommandDTO::default_instance_,
      CloseOrderCommandDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderCommandDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseOrderCommandDTO));
  CloseOrderByCommandDTO_descriptor_ = file->message_type(6);
  static const int CloseOrderByCommandDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, orderby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, retryspanms_),
  };
  CloseOrderByCommandDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseOrderByCommandDTO_descriptor_,
      CloseOrderByCommandDTO::default_instance_,
      CloseOrderByCommandDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseOrderByCommandDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseOrderByCommandDTO));
  OrderInfoDTO_descriptor_ = file->message_type(7);
  static const int OrderInfoDTO_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, tradecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, stoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, takeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, pointprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, opentime_),
  };
  OrderInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderInfoDTO_descriptor_,
      OrderInfoDTO::default_instance_,
      OrderInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderInfoDTO));
  UpdateOrdersDTO_descriptor_ = file->message_type(8);
  static const int UpdateOrdersDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOrdersDTO, orders_),
  };
  UpdateOrdersDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateOrdersDTO_descriptor_,
      UpdateOrdersDTO::default_instance_,
      UpdateOrdersDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOrdersDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOrdersDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateOrdersDTO));
  CommandResultDTO_descriptor_ = file->message_type(9);
  static const int CommandResultDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResultDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResultDTO, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResultDTO, order_),
  };
  CommandResultDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandResultDTO_descriptor_,
      CommandResultDTO::default_instance_,
      CommandResultDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResultDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResultDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandResultDTO));
  RequestHistoryDTO_descriptor_ = file->message_type(10);
  static const int RequestHistoryDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHistoryDTO, command_),
  };
  RequestHistoryDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHistoryDTO_descriptor_,
      RequestHistoryDTO::default_instance_,
      RequestHistoryDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHistoryDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHistoryDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHistoryDTO));
  HistoryOrderInfoDTO_descriptor_ = file->message_type(11);
  static const int HistoryOrderInfoDTO_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, tradecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, stoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, takeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, pointprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, closetime_),
  };
  HistoryOrderInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryOrderInfoDTO_descriptor_,
      HistoryOrderInfoDTO::default_instance_,
      HistoryOrderInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryOrderInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryOrderInfoDTO));
  OrdersHistoryDTO_descriptor_ = file->message_type(12);
  static const int OrdersHistoryDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersHistoryDTO, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersHistoryDTO, orders_),
  };
  OrdersHistoryDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrdersHistoryDTO_descriptor_,
      OrdersHistoryDTO::default_instance_,
      OrdersHistoryDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersHistoryDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersHistoryDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrdersHistoryDTO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDTO_descriptor_, &LoginDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolRegistrationDTO_descriptor_, &SymbolRegistrationDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceDTO_descriptor_, &PriceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenOrderCommandDTO_descriptor_, &OpenOrderCommandDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyOrderCommandDTO_descriptor_, &ModifyOrderCommandDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseOrderCommandDTO_descriptor_, &CloseOrderCommandDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseOrderByCommandDTO_descriptor_, &CloseOrderByCommandDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderInfoDTO_descriptor_, &OrderInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateOrdersDTO_descriptor_, &UpdateOrdersDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandResultDTO_descriptor_, &CommandResultDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHistoryDTO_descriptor_, &RequestHistoryDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryOrderInfoDTO_descriptor_, &HistoryOrderInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrdersHistoryDTO_descriptor_, &OrdersHistoryDTO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2eproto() {
  delete LoginDTO::default_instance_;
  delete LoginDTO_reflection_;
  delete SymbolRegistrationDTO::default_instance_;
  delete SymbolRegistrationDTO_reflection_;
  delete PriceDTO::default_instance_;
  delete PriceDTO_reflection_;
  delete OpenOrderCommandDTO::default_instance_;
  delete OpenOrderCommandDTO_reflection_;
  delete ModifyOrderCommandDTO::default_instance_;
  delete ModifyOrderCommandDTO_reflection_;
  delete CloseOrderCommandDTO::default_instance_;
  delete CloseOrderCommandDTO_reflection_;
  delete CloseOrderByCommandDTO::default_instance_;
  delete CloseOrderByCommandDTO_reflection_;
  delete OrderInfoDTO::default_instance_;
  delete OrderInfoDTO_reflection_;
  delete UpdateOrdersDTO::default_instance_;
  delete UpdateOrdersDTO_reflection_;
  delete CommandResultDTO::default_instance_;
  delete CommandResultDTO_reflection_;
  delete RequestHistoryDTO::default_instance_;
  delete RequestHistoryDTO_reflection_;
  delete HistoryOrderInfoDTO::default_instance_;
  delete HistoryOrderInfoDTO_reflection_;
  delete OrdersHistoryDTO::default_instance_;
  delete OrdersHistoryDTO_reflection_;
}

void protobuf_AddDesc_Protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Protocol.proto\"\033\n\010LoginDTO\022\017\n\007company\030"
    "\001 \002(\t\"9\n\025SymbolRegistrationDTO\022\016\n\006symbol"
    "\030\001 \002(\t\022\020\n\010register\030\002 \002(\010\"4\n\010PriceDTO\022\016\n\006"
    "symbol\030\001 \002(\t\022\013\n\003bid\030\002 \002(\001\022\013\n\003ask\030\003 \002(\001\"\222"
    "\002\n\023OpenOrderCommandDTO\022\017\n\007command\030\001 \002(\005\022"
    "\016\n\006symbol\030\002 \002(\t\022\024\n\014tradeCommand\030\003 \002(\005\022\016\n"
    "\006volume\030\004 \002(\001\022\021\n\topenPrice\030\005 \002(\001\022\020\n\010stop"
    "Loss\030\006 \002(\001\022\022\n\ntakeProfit\030\007 \002(\001\022\020\n\010slippa"
    "ge\030\010 \002(\005\022\017\n\007comment\030\t \001(\t\022\023\n\013magicNumber"
    "\030\n \001(\005\022\017\n\007retries\030\013 \002(\005\022\023\n\013retrySpanMs\030\014"
    " \002(\005\022\035\n\025lastChanceRetrySpanMs\030\r \002(\005\"\226\001\n\025"
    "ModifyOrderCommandDTO\022\017\n\007command\030\001 \002(\005\022\r"
    "\n\005order\030\002 \002(\005\022\021\n\topenPrice\030\003 \002(\001\022\020\n\010stop"
    "Loss\030\004 \002(\001\022\022\n\ntakeProfit\030\005 \002(\001\022\017\n\007retrie"
    "s\030\006 \002(\005\022\023\n\013retrySpanMs\030\007 \002(\005\"\\\n\024CloseOrd"
    "erCommandDTO\022\017\n\007command\030\001 \002(\005\022\r\n\005order\030\002"
    " \002(\005\022\017\n\007retries\030\003 \002(\005\022\023\n\013retrySpanMs\030\004 \002"
    "(\005\"o\n\026CloseOrderByCommandDTO\022\017\n\007command\030"
    "\001 \002(\005\022\r\n\005order\030\002 \002(\005\022\017\n\007orderBy\030\003 \002(\005\022\017\n"
    "\007retries\030\004 \002(\005\022\023\n\013retrySpanMs\030\005 \002(\005\"\327\001\n\014"
    "OrderInfoDTO\022\r\n\005order\030\001 \002(\005\022\016\n\006symbol\030\002 "
    "\002(\t\022\024\n\014tradeCommand\030\003 \002(\005\022\016\n\006volume\030\004 \002("
    "\001\022\021\n\topenPrice\030\005 \002(\001\022\020\n\010stopLoss\030\006 \002(\001\022\022"
    "\n\ntakeProfit\030\007 \002(\001\022\022\n\nclosePrice\030\010 \002(\001\022\016"
    "\n\006profit\030\t \002(\001\022\023\n\013pointProfit\030\n \002(\005\022\020\n\010o"
    "penTime\030\013 \002(\005\"0\n\017UpdateOrdersDTO\022\035\n\006orde"
    "rs\030\001 \003(\0132\r.OrderInfoDTO\"B\n\020CommandResult"
    "DTO\022\017\n\007command\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\022\r\n\005"
    "order\030\003 \002(\005\"$\n\021RequestHistoryDTO\022\017\n\007comm"
    "and\030\001 \002(\005\"\361\001\n\023HistoryOrderInfoDTO\022\r\n\005ord"
    "er\030\001 \002(\005\022\016\n\006symbol\030\002 \002(\t\022\024\n\014tradeCommand"
    "\030\003 \002(\005\022\016\n\006volume\030\004 \002(\001\022\021\n\topenPrice\030\005 \002("
    "\001\022\020\n\010stopLoss\030\006 \002(\001\022\022\n\ntakeProfit\030\007 \002(\001\022"
    "\022\n\nclosePrice\030\010 \002(\001\022\016\n\006profit\030\t \002(\001\022\023\n\013p"
    "ointProfit\030\n \002(\005\022\020\n\010openTime\030\013 \002(\005\022\021\n\tcl"
    "oseTime\030\014 \002(\005\"I\n\020OrdersHistoryDTO\022\017\n\007com"
    "mand\030\001 \002(\005\022$\n\006orders\030\002 \003(\0132\024.HistoryOrde"
    "rInfoDTO", 1488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol.proto", &protobuf_RegisterTypes);
  LoginDTO::default_instance_ = new LoginDTO();
  SymbolRegistrationDTO::default_instance_ = new SymbolRegistrationDTO();
  PriceDTO::default_instance_ = new PriceDTO();
  OpenOrderCommandDTO::default_instance_ = new OpenOrderCommandDTO();
  ModifyOrderCommandDTO::default_instance_ = new ModifyOrderCommandDTO();
  CloseOrderCommandDTO::default_instance_ = new CloseOrderCommandDTO();
  CloseOrderByCommandDTO::default_instance_ = new CloseOrderByCommandDTO();
  OrderInfoDTO::default_instance_ = new OrderInfoDTO();
  UpdateOrdersDTO::default_instance_ = new UpdateOrdersDTO();
  CommandResultDTO::default_instance_ = new CommandResultDTO();
  RequestHistoryDTO::default_instance_ = new RequestHistoryDTO();
  HistoryOrderInfoDTO::default_instance_ = new HistoryOrderInfoDTO();
  OrdersHistoryDTO::default_instance_ = new OrdersHistoryDTO();
  LoginDTO::default_instance_->InitAsDefaultInstance();
  SymbolRegistrationDTO::default_instance_->InitAsDefaultInstance();
  PriceDTO::default_instance_->InitAsDefaultInstance();
  OpenOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  ModifyOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  CloseOrderCommandDTO::default_instance_->InitAsDefaultInstance();
  CloseOrderByCommandDTO::default_instance_->InitAsDefaultInstance();
  OrderInfoDTO::default_instance_->InitAsDefaultInstance();
  UpdateOrdersDTO::default_instance_->InitAsDefaultInstance();
  CommandResultDTO::default_instance_->InitAsDefaultInstance();
  RequestHistoryDTO::default_instance_->InitAsDefaultInstance();
  HistoryOrderInfoDTO::default_instance_->InitAsDefaultInstance();
  OrdersHistoryDTO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2eproto {
  StaticDescriptorInitializer_Protocol_2eproto() {
    protobuf_AddDesc_Protocol_2eproto();
  }
} static_descriptor_initializer_Protocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginDTO::kCompanyFieldNumber;
#endif  // !_MSC_VER

LoginDTO::LoginDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginDTO::InitAsDefaultInstance() {
}

LoginDTO::LoginDTO(const LoginDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginDTO::SharedCtor() {
  _cached_size_ = 0;
  company_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDTO::~LoginDTO() {
  SharedDtor();
}

void LoginDTO::SharedDtor() {
  if (company_ != &::google::protobuf::internal::kEmptyString) {
    delete company_;
  }
  if (this != default_instance_) {
  }
}

void LoginDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDTO_descriptor_;
}

const LoginDTO& LoginDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

LoginDTO* LoginDTO::default_instance_ = NULL;

LoginDTO* LoginDTO::New() const {
  return new LoginDTO;
}

void LoginDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_company()) {
      if (company_ != &::google::protobuf::internal::kEmptyString) {
        company_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->company().data(), this->company().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string company = 1;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->company(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string company = 1;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->company(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company = 1;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDTO::MergeFrom(const LoginDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company()) {
      set_company(from.company());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDTO::CopyFrom(const LoginDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginDTO::Swap(LoginDTO* other) {
  if (other != this) {
    std::swap(company_, other->company_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDTO_descriptor_;
  metadata.reflection = LoginDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolRegistrationDTO::kSymbolFieldNumber;
const int SymbolRegistrationDTO::kRegisterFieldNumber;
#endif  // !_MSC_VER

SymbolRegistrationDTO::SymbolRegistrationDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolRegistrationDTO::InitAsDefaultInstance() {
}

SymbolRegistrationDTO::SymbolRegistrationDTO(const SymbolRegistrationDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolRegistrationDTO::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  register__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolRegistrationDTO::~SymbolRegistrationDTO() {
  SharedDtor();
}

void SymbolRegistrationDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void SymbolRegistrationDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolRegistrationDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolRegistrationDTO_descriptor_;
}

const SymbolRegistrationDTO& SymbolRegistrationDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

SymbolRegistrationDTO* SymbolRegistrationDTO::default_instance_ = NULL;

SymbolRegistrationDTO* SymbolRegistrationDTO::New() const {
  return new SymbolRegistrationDTO;
}

void SymbolRegistrationDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    register__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolRegistrationDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_register;
        break;
      }

      // required bool register = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &register__)));
          set_has_register_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolRegistrationDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required bool register = 2;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->register_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolRegistrationDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required bool register = 2;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->register_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolRegistrationDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required bool register = 2;
    if (has_register_()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRegistrationDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolRegistrationDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolRegistrationDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolRegistrationDTO::MergeFrom(const SymbolRegistrationDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_register_()) {
      set_register_(from.register_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolRegistrationDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolRegistrationDTO::CopyFrom(const SymbolRegistrationDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRegistrationDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SymbolRegistrationDTO::Swap(SymbolRegistrationDTO* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(register__, other->register__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolRegistrationDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolRegistrationDTO_descriptor_;
  metadata.reflection = SymbolRegistrationDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceDTO::kSymbolFieldNumber;
const int PriceDTO::kBidFieldNumber;
const int PriceDTO::kAskFieldNumber;
#endif  // !_MSC_VER

PriceDTO::PriceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceDTO::InitAsDefaultInstance() {
}

PriceDTO::PriceDTO(const PriceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceDTO::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_ = 0;
  ask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceDTO::~PriceDTO() {
  SharedDtor();
}

void PriceDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void PriceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceDTO_descriptor_;
}

const PriceDTO& PriceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

PriceDTO* PriceDTO::default_instance_ = NULL;

PriceDTO* PriceDTO::New() const {
  return new PriceDTO;
}

void PriceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    bid_ = 0;
    ask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bid;
        break;
      }

      // required double bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ask;
        break;
      }

      // required double ask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required double bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid(), output);
  }

  // required double ask = 3;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required double bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bid(), target);
  }

  // required double ask = 3;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required double bid = 2;
    if (has_bid()) {
      total_size += 1 + 8;
    }

    // required double ask = 3;
    if (has_ask()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceDTO::MergeFrom(const PriceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceDTO::CopyFrom(const PriceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PriceDTO::Swap(PriceDTO* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(bid_, other->bid_);
    std::swap(ask_, other->ask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceDTO_descriptor_;
  metadata.reflection = PriceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenOrderCommandDTO::kCommandFieldNumber;
const int OpenOrderCommandDTO::kSymbolFieldNumber;
const int OpenOrderCommandDTO::kTradeCommandFieldNumber;
const int OpenOrderCommandDTO::kVolumeFieldNumber;
const int OpenOrderCommandDTO::kOpenPriceFieldNumber;
const int OpenOrderCommandDTO::kStopLossFieldNumber;
const int OpenOrderCommandDTO::kTakeProfitFieldNumber;
const int OpenOrderCommandDTO::kSlippageFieldNumber;
const int OpenOrderCommandDTO::kCommentFieldNumber;
const int OpenOrderCommandDTO::kMagicNumberFieldNumber;
const int OpenOrderCommandDTO::kRetriesFieldNumber;
const int OpenOrderCommandDTO::kRetrySpanMsFieldNumber;
const int OpenOrderCommandDTO::kLastChanceRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

OpenOrderCommandDTO::OpenOrderCommandDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenOrderCommandDTO::InitAsDefaultInstance() {
}

OpenOrderCommandDTO::OpenOrderCommandDTO(const OpenOrderCommandDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  slippage_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magicnumber_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  lastchanceretryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOrderCommandDTO::~OpenOrderCommandDTO() {
  SharedDtor();
}

void OpenOrderCommandDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void OpenOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenOrderCommandDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenOrderCommandDTO_descriptor_;
}

const OpenOrderCommandDTO& OpenOrderCommandDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

OpenOrderCommandDTO* OpenOrderCommandDTO::default_instance_ = NULL;

OpenOrderCommandDTO* OpenOrderCommandDTO::New() const {
  return new OpenOrderCommandDTO;
}

void OpenOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    slippage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    magicnumber_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
    lastchanceretryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slippage;
        break;
      }

      // required int32 slippage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slippage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slippage_)));
          set_has_slippage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // optional string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magicNumber;
        break;
      }

      // optional int32 magicNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicnumber_)));
          set_has_magicnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_retries;
        break;
      }

      // required int32 retries = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lastChanceRetrySpanMs;
        break;
      }

      // required int32 lastChanceRetrySpanMs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastChanceRetrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastchanceretryspanms_)));
          set_has_lastchanceretryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required int32 slippage = 8;
  if (has_slippage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->slippage(), output);
  }

  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  // optional int32 magicNumber = 10;
  if (has_magicnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->magicnumber(), output);
  }

  // required int32 retries = 11;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retries(), output);
  }

  // required int32 retrySpanMs = 12;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retryspanms(), output);
  }

  // required int32 lastChanceRetrySpanMs = 13;
  if (has_lastchanceretryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lastchanceretryspanms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenOrderCommandDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tradecommand(), target);
  }

  // required double volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->openprice(), target);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stoploss(), target);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->takeprofit(), target);
  }

  // required int32 slippage = 8;
  if (has_slippage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->slippage(), target);
  }

  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }

  // optional int32 magicNumber = 10;
  if (has_magicnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->magicnumber(), target);
  }

  // required int32 retries = 11;
  if (has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retries(), target);
  }

  // required int32 retrySpanMs = 12;
  if (has_retryspanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retryspanms(), target);
  }

  // required int32 lastChanceRetrySpanMs = 13;
  if (has_lastchanceretryspanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lastchanceretryspanms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required int32 slippage = 8;
    if (has_slippage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slippage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional int32 magicNumber = 10;
    if (has_magicnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicnumber());
    }

    // required int32 retries = 11;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 12;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

    // required int32 lastChanceRetrySpanMs = 13;
    if (has_lastchanceretryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastchanceretryspanms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOrderCommandDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenOrderCommandDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenOrderCommandDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenOrderCommandDTO::MergeFrom(const OpenOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_slippage()) {
      set_slippage(from.slippage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_magicnumber()) {
      set_magicnumber(from.magicnumber());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
    if (from.has_lastchanceretryspanms()) {
      set_lastchanceretryspanms(from.lastchanceretryspanms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenOrderCommandDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrderCommandDTO::CopyFrom(const OpenOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001cff) != 0x00001cff) return false;

  return true;
}

void OpenOrderCommandDTO::Swap(OpenOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(slippage_, other->slippage_);
    std::swap(comment_, other->comment_);
    std::swap(magicnumber_, other->magicnumber_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(lastchanceretryspanms_, other->lastchanceretryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenOrderCommandDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenOrderCommandDTO_descriptor_;
  metadata.reflection = OpenOrderCommandDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyOrderCommandDTO::kCommandFieldNumber;
const int ModifyOrderCommandDTO::kOrderFieldNumber;
const int ModifyOrderCommandDTO::kOpenPriceFieldNumber;
const int ModifyOrderCommandDTO::kStopLossFieldNumber;
const int ModifyOrderCommandDTO::kTakeProfitFieldNumber;
const int ModifyOrderCommandDTO::kRetriesFieldNumber;
const int ModifyOrderCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

ModifyOrderCommandDTO::ModifyOrderCommandDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyOrderCommandDTO::InitAsDefaultInstance() {
}

ModifyOrderCommandDTO::ModifyOrderCommandDTO(const ModifyOrderCommandDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyOrderCommandDTO::~ModifyOrderCommandDTO() {
  SharedDtor();
}

void ModifyOrderCommandDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyOrderCommandDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyOrderCommandDTO_descriptor_;
}

const ModifyOrderCommandDTO& ModifyOrderCommandDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

ModifyOrderCommandDTO* ModifyOrderCommandDTO::default_instance_ = NULL;

ModifyOrderCommandDTO* ModifyOrderCommandDTO::New() const {
  return new ModifyOrderCommandDTO;
}

void ModifyOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_retries;
        break;
      }

      // required int32 retries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required double openPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // required double stopLoss = 4;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stoploss(), output);
  }

  // required double takeProfit = 5;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->takeprofit(), output);
  }

  // required int32 retries = 6;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retries(), output);
  }

  // required int32 retrySpanMs = 7;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->retryspanms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyOrderCommandDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // required int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // required double openPrice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openprice(), target);
  }

  // required double stopLoss = 4;
  if (has_stoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stoploss(), target);
  }

  // required double takeProfit = 5;
  if (has_takeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->takeprofit(), target);
  }

  // required int32 retries = 6;
  if (has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retries(), target);
  }

  // required int32 retrySpanMs = 7;
  if (has_retryspanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->retryspanms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required double openPrice = 3;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 4;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 5;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required int32 retries = 6;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 7;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyOrderCommandDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyOrderCommandDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyOrderCommandDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyOrderCommandDTO::MergeFrom(const ModifyOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyOrderCommandDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyOrderCommandDTO::CopyFrom(const ModifyOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ModifyOrderCommandDTO::Swap(ModifyOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyOrderCommandDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyOrderCommandDTO_descriptor_;
  metadata.reflection = ModifyOrderCommandDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseOrderCommandDTO::kCommandFieldNumber;
const int CloseOrderCommandDTO::kOrderFieldNumber;
const int CloseOrderCommandDTO::kRetriesFieldNumber;
const int CloseOrderCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

CloseOrderCommandDTO::CloseOrderCommandDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseOrderCommandDTO::InitAsDefaultInstance() {
}

CloseOrderCommandDTO::CloseOrderCommandDTO(const CloseOrderCommandDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseOrderCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseOrderCommandDTO::~CloseOrderCommandDTO() {
  SharedDtor();
}

void CloseOrderCommandDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseOrderCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseOrderCommandDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseOrderCommandDTO_descriptor_;
}

const CloseOrderCommandDTO& CloseOrderCommandDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

CloseOrderCommandDTO* CloseOrderCommandDTO::default_instance_ = NULL;

CloseOrderCommandDTO* CloseOrderCommandDTO::New() const {
  return new CloseOrderCommandDTO;
}

void CloseOrderCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseOrderCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retries;
        break;
      }

      // required int32 retries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseOrderCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required int32 retries = 3;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retries(), output);
  }

  // required int32 retrySpanMs = 4;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retryspanms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseOrderCommandDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // required int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // required int32 retries = 3;
  if (has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retries(), target);
  }

  // required int32 retrySpanMs = 4;
  if (has_retryspanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retryspanms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseOrderCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required int32 retries = 3;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 4;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseOrderCommandDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseOrderCommandDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseOrderCommandDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseOrderCommandDTO::MergeFrom(const CloseOrderCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseOrderCommandDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseOrderCommandDTO::CopyFrom(const CloseOrderCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseOrderCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CloseOrderCommandDTO::Swap(CloseOrderCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseOrderCommandDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseOrderCommandDTO_descriptor_;
  metadata.reflection = CloseOrderCommandDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseOrderByCommandDTO::kCommandFieldNumber;
const int CloseOrderByCommandDTO::kOrderFieldNumber;
const int CloseOrderByCommandDTO::kOrderByFieldNumber;
const int CloseOrderByCommandDTO::kRetriesFieldNumber;
const int CloseOrderByCommandDTO::kRetrySpanMsFieldNumber;
#endif  // !_MSC_VER

CloseOrderByCommandDTO::CloseOrderByCommandDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseOrderByCommandDTO::InitAsDefaultInstance() {
}

CloseOrderByCommandDTO::CloseOrderByCommandDTO(const CloseOrderByCommandDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseOrderByCommandDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  order_ = 0;
  orderby_ = 0;
  retries_ = 0;
  retryspanms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseOrderByCommandDTO::~CloseOrderByCommandDTO() {
  SharedDtor();
}

void CloseOrderByCommandDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseOrderByCommandDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseOrderByCommandDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseOrderByCommandDTO_descriptor_;
}

const CloseOrderByCommandDTO& CloseOrderByCommandDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

CloseOrderByCommandDTO* CloseOrderByCommandDTO::default_instance_ = NULL;

CloseOrderByCommandDTO* CloseOrderByCommandDTO::New() const {
  return new CloseOrderByCommandDTO;
}

void CloseOrderByCommandDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    order_ = 0;
    orderby_ = 0;
    retries_ = 0;
    retryspanms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseOrderByCommandDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_orderBy;
        break;
      }

      // required int32 orderBy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderBy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderby_)));
          set_has_orderby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_retries;
        break;
      }

      // required int32 retries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_retrySpanMs;
        break;
      }

      // required int32 retrySpanMs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrySpanMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retryspanms_)));
          set_has_retryspanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseOrderByCommandDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // required int32 orderBy = 3;
  if (has_orderby()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderby(), output);
  }

  // required int32 retries = 4;
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retries(), output);
  }

  // required int32 retrySpanMs = 5;
  if (has_retryspanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retryspanms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseOrderByCommandDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // required int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // required int32 orderBy = 3;
  if (has_orderby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderby(), target);
  }

  // required int32 retries = 4;
  if (has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retries(), target);
  }

  // required int32 retrySpanMs = 5;
  if (has_retryspanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retryspanms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseOrderByCommandDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required int32 orderBy = 3;
    if (has_orderby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderby());
    }

    // required int32 retries = 4;
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries());
    }

    // required int32 retrySpanMs = 5;
    if (has_retryspanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retryspanms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseOrderByCommandDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseOrderByCommandDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseOrderByCommandDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseOrderByCommandDTO::MergeFrom(const CloseOrderByCommandDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_orderby()) {
      set_orderby(from.orderby());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_retryspanms()) {
      set_retryspanms(from.retryspanms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseOrderByCommandDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseOrderByCommandDTO::CopyFrom(const CloseOrderByCommandDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseOrderByCommandDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CloseOrderByCommandDTO::Swap(CloseOrderByCommandDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(order_, other->order_);
    std::swap(orderby_, other->orderby_);
    std::swap(retries_, other->retries_);
    std::swap(retryspanms_, other->retryspanms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseOrderByCommandDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseOrderByCommandDTO_descriptor_;
  metadata.reflection = CloseOrderByCommandDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfoDTO::kOrderFieldNumber;
const int OrderInfoDTO::kSymbolFieldNumber;
const int OrderInfoDTO::kTradeCommandFieldNumber;
const int OrderInfoDTO::kVolumeFieldNumber;
const int OrderInfoDTO::kOpenPriceFieldNumber;
const int OrderInfoDTO::kStopLossFieldNumber;
const int OrderInfoDTO::kTakeProfitFieldNumber;
const int OrderInfoDTO::kClosePriceFieldNumber;
const int OrderInfoDTO::kProfitFieldNumber;
const int OrderInfoDTO::kPointProfitFieldNumber;
const int OrderInfoDTO::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

OrderInfoDTO::OrderInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderInfoDTO::InitAsDefaultInstance() {
}

OrderInfoDTO::OrderInfoDTO(const OrderInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  closeprice_ = 0;
  profit_ = 0;
  pointprofit_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfoDTO::~OrderInfoDTO() {
  SharedDtor();
}

void OrderInfoDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void OrderInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfoDTO_descriptor_;
}

const OrderInfoDTO& OrderInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

OrderInfoDTO* OrderInfoDTO::default_instance_ = NULL;

OrderInfoDTO* OrderInfoDTO::New() const {
  return new OrderInfoDTO;
}

void OrderInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    closeprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profit_ = 0;
    pointprofit_ = 0;
    opentime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_closePrice;
        break;
      }

      // required double closePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_profit;
        break;
      }

      // required double profit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pointProfit;
        break;
      }

      // required int32 pointProfit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointprofit_)));
          set_has_pointprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->closeprice(), output);
  }

  // required double profit = 9;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->profit(), output);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pointprofit(), output);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tradecommand(), target);
  }

  // required double volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->openprice(), target);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stoploss(), target);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->takeprofit(), target);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->closeprice(), target);
  }

  // required double profit = 9;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->profit(), target);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pointprofit(), target);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required double closePrice = 8;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double profit = 9;
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // required int32 pointProfit = 10;
    if (has_pointprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointprofit());
    }

    // required int32 openTime = 11;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderInfoDTO::MergeFrom(const OrderInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_pointprofit()) {
      set_pointprofit(from.pointprofit());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfoDTO::CopyFrom(const OrderInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void OrderInfoDTO::Swap(OrderInfoDTO* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(profit_, other->profit_);
    std::swap(pointprofit_, other->pointprofit_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfoDTO_descriptor_;
  metadata.reflection = OrderInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateOrdersDTO::kOrdersFieldNumber;
#endif  // !_MSC_VER

UpdateOrdersDTO::UpdateOrdersDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateOrdersDTO::InitAsDefaultInstance() {
}

UpdateOrdersDTO::UpdateOrdersDTO(const UpdateOrdersDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateOrdersDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateOrdersDTO::~UpdateOrdersDTO() {
  SharedDtor();
}

void UpdateOrdersDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateOrdersDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateOrdersDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateOrdersDTO_descriptor_;
}

const UpdateOrdersDTO& UpdateOrdersDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

UpdateOrdersDTO* UpdateOrdersDTO::default_instance_ = NULL;

UpdateOrdersDTO* UpdateOrdersDTO::New() const {
  return new UpdateOrdersDTO;
}

void UpdateOrdersDTO::Clear() {
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateOrdersDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OrderInfoDTO orders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateOrdersDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OrderInfoDTO orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateOrdersDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OrderInfoDTO orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateOrdersDTO::ByteSize() const {
  int total_size = 0;

  // repeated .OrderInfoDTO orders = 1;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateOrdersDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateOrdersDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateOrdersDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateOrdersDTO::MergeFrom(const UpdateOrdersDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateOrdersDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOrdersDTO::CopyFrom(const UpdateOrdersDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrdersDTO::IsInitialized() const {

  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateOrdersDTO::Swap(UpdateOrdersDTO* other) {
  if (other != this) {
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateOrdersDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateOrdersDTO_descriptor_;
  metadata.reflection = UpdateOrdersDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandResultDTO::kCommandFieldNumber;
const int CommandResultDTO::kResultFieldNumber;
const int CommandResultDTO::kOrderFieldNumber;
#endif  // !_MSC_VER

CommandResultDTO::CommandResultDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandResultDTO::InitAsDefaultInstance() {
}

CommandResultDTO::CommandResultDTO(const CommandResultDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResultDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  result_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResultDTO::~CommandResultDTO() {
  SharedDtor();
}

void CommandResultDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandResultDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandResultDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandResultDTO_descriptor_;
}

const CommandResultDTO& CommandResultDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

CommandResultDTO* CommandResultDTO::default_instance_ = NULL;

CommandResultDTO* CommandResultDTO::New() const {
  return new CommandResultDTO;
}

void CommandResultDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    result_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandResultDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // required int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResultDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandResultDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandResultDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResultDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandResultDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandResultDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandResultDTO::MergeFrom(const CommandResultDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandResultDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResultDTO::CopyFrom(const CommandResultDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResultDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CommandResultDTO::Swap(CommandResultDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(result_, other->result_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandResultDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandResultDTO_descriptor_;
  metadata.reflection = CommandResultDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHistoryDTO::kCommandFieldNumber;
#endif  // !_MSC_VER

RequestHistoryDTO::RequestHistoryDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestHistoryDTO::InitAsDefaultInstance() {
}

RequestHistoryDTO::RequestHistoryDTO(const RequestHistoryDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHistoryDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHistoryDTO::~RequestHistoryDTO() {
  SharedDtor();
}

void RequestHistoryDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHistoryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHistoryDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHistoryDTO_descriptor_;
}

const RequestHistoryDTO& RequestHistoryDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

RequestHistoryDTO* RequestHistoryDTO::default_instance_ = NULL;

RequestHistoryDTO* RequestHistoryDTO::New() const {
  return new RequestHistoryDTO;
}

void RequestHistoryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHistoryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestHistoryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestHistoryDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestHistoryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHistoryDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHistoryDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHistoryDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHistoryDTO::MergeFrom(const RequestHistoryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHistoryDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHistoryDTO::CopyFrom(const RequestHistoryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHistoryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestHistoryDTO::Swap(RequestHistoryDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHistoryDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHistoryDTO_descriptor_;
  metadata.reflection = RequestHistoryDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryOrderInfoDTO::kOrderFieldNumber;
const int HistoryOrderInfoDTO::kSymbolFieldNumber;
const int HistoryOrderInfoDTO::kTradeCommandFieldNumber;
const int HistoryOrderInfoDTO::kVolumeFieldNumber;
const int HistoryOrderInfoDTO::kOpenPriceFieldNumber;
const int HistoryOrderInfoDTO::kStopLossFieldNumber;
const int HistoryOrderInfoDTO::kTakeProfitFieldNumber;
const int HistoryOrderInfoDTO::kClosePriceFieldNumber;
const int HistoryOrderInfoDTO::kProfitFieldNumber;
const int HistoryOrderInfoDTO::kPointProfitFieldNumber;
const int HistoryOrderInfoDTO::kOpenTimeFieldNumber;
const int HistoryOrderInfoDTO::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

HistoryOrderInfoDTO::HistoryOrderInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryOrderInfoDTO::InitAsDefaultInstance() {
}

HistoryOrderInfoDTO::HistoryOrderInfoDTO(const HistoryOrderInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryOrderInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecommand_ = 0;
  volume_ = 0;
  openprice_ = 0;
  stoploss_ = 0;
  takeprofit_ = 0;
  closeprice_ = 0;
  profit_ = 0;
  pointprofit_ = 0;
  opentime_ = 0;
  closetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryOrderInfoDTO::~HistoryOrderInfoDTO() {
  SharedDtor();
}

void HistoryOrderInfoDTO::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void HistoryOrderInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryOrderInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryOrderInfoDTO_descriptor_;
}

const HistoryOrderInfoDTO& HistoryOrderInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

HistoryOrderInfoDTO* HistoryOrderInfoDTO::default_instance_ = NULL;

HistoryOrderInfoDTO* HistoryOrderInfoDTO::New() const {
  return new HistoryOrderInfoDTO;
}

void HistoryOrderInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    tradecommand_ = 0;
    volume_ = 0;
    openprice_ = 0;
    stoploss_ = 0;
    takeprofit_ = 0;
    closeprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profit_ = 0;
    pointprofit_ = 0;
    opentime_ = 0;
    closetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryOrderInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tradeCommand;
        break;
      }

      // required int32 tradeCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradecommand_)));
          set_has_tradecommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_volume;
        break;
      }

      // required double volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_openPrice;
        break;
      }

      // required double openPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_stopLoss;
        break;
      }

      // required double stopLoss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_takeProfit;
        break;
      }

      // required double takeProfit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_takeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_closePrice;
        break;
      }

      // required double closePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_profit;
        break;
      }

      // required double profit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pointProfit;
        break;
      }

      // required int32 pointProfit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointprofit_)));
          set_has_pointprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_closeTime;
        break;
      }

      // required int32 closeTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryOrderInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradecommand(), output);
  }

  // required double volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->closeprice(), output);
  }

  // required double profit = 9;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->profit(), output);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pointprofit(), output);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opentime(), output);
  }

  // required int32 closeTime = 12;
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->closetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryOrderInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required int32 tradeCommand = 3;
  if (has_tradecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tradecommand(), target);
  }

  // required double volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // required double openPrice = 5;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->openprice(), target);
  }

  // required double stopLoss = 6;
  if (has_stoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stoploss(), target);
  }

  // required double takeProfit = 7;
  if (has_takeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->takeprofit(), target);
  }

  // required double closePrice = 8;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->closeprice(), target);
  }

  // required double profit = 9;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->profit(), target);
  }

  // required int32 pointProfit = 10;
  if (has_pointprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pointprofit(), target);
  }

  // required int32 openTime = 11;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->opentime(), target);
  }

  // required int32 closeTime = 12;
  if (has_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->closetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryOrderInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 tradeCommand = 3;
    if (has_tradecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradecommand());
    }

    // required double volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double openPrice = 5;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double stopLoss = 6;
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

    // required double takeProfit = 7;
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required double closePrice = 8;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double profit = 9;
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // required int32 pointProfit = 10;
    if (has_pointprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointprofit());
    }

    // required int32 openTime = 11;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

    // required int32 closeTime = 12;
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryOrderInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryOrderInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryOrderInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryOrderInfoDTO::MergeFrom(const HistoryOrderInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradecommand()) {
      set_tradecommand(from.tradecommand());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_pointprofit()) {
      set_pointprofit(from.pointprofit());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryOrderInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryOrderInfoDTO::CopyFrom(const HistoryOrderInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryOrderInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void HistoryOrderInfoDTO::Swap(HistoryOrderInfoDTO* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(symbol_, other->symbol_);
    std::swap(tradecommand_, other->tradecommand_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(profit_, other->profit_);
    std::swap(pointprofit_, other->pointprofit_);
    std::swap(opentime_, other->opentime_);
    std::swap(closetime_, other->closetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryOrderInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryOrderInfoDTO_descriptor_;
  metadata.reflection = HistoryOrderInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrdersHistoryDTO::kCommandFieldNumber;
const int OrdersHistoryDTO::kOrdersFieldNumber;
#endif  // !_MSC_VER

OrdersHistoryDTO::OrdersHistoryDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrdersHistoryDTO::InitAsDefaultInstance() {
}

OrdersHistoryDTO::OrdersHistoryDTO(const OrdersHistoryDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrdersHistoryDTO::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdersHistoryDTO::~OrdersHistoryDTO() {
  SharedDtor();
}

void OrdersHistoryDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdersHistoryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdersHistoryDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdersHistoryDTO_descriptor_;
}

const OrdersHistoryDTO& OrdersHistoryDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();
  return *default_instance_;
}

OrdersHistoryDTO* OrdersHistoryDTO::default_instance_ = NULL;

OrdersHistoryDTO* OrdersHistoryDTO::New() const {
  return new OrdersHistoryDTO;
}

void OrdersHistoryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
  }
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrdersHistoryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orders;
        break;
      }

      // repeated .HistoryOrderInfoDTO orders = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrdersHistoryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // repeated .HistoryOrderInfoDTO orders = 2;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrdersHistoryDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // repeated .HistoryOrderInfoDTO orders = 2;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrdersHistoryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  // repeated .HistoryOrderInfoDTO orders = 2;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdersHistoryDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrdersHistoryDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrdersHistoryDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrdersHistoryDTO::MergeFrom(const OrdersHistoryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrdersHistoryDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersHistoryDTO::CopyFrom(const OrdersHistoryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersHistoryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  return true;
}

void OrdersHistoryDTO::Swap(OrdersHistoryDTO* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrdersHistoryDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdersHistoryDTO_descriptor_;
  metadata.reflection = OrdersHistoryDTO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
